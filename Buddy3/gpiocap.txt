#include "pico/stdlib.h"
#include "hardware/gpio.h"
#include "hardware/timer.h"
#include <stdio.h>

#define MAX_PULSES 10  // Capture only 10 pulses

volatile uint32_t rising_edge_time = 0;
volatile uint32_t falling_edge_time = 0;

volatile uint32_t high_pulses[MAX_PULSES];  // Array to store high pulse widths
volatile uint32_t low_pulses[MAX_PULSES];   // Array to store low pulse widths
volatile int pulse_count = 0;               // Counter to keep track of pulses

// Interrupt handler to capture pulse widths on GPIO 0
void gpio_callback(uint gpio, uint32_t events) {
    uint32_t current_time = time_us_32();

    if (events & GPIO_IRQ_EDGE_RISE) {
        // Rising edge detected - end of low pulse, start of high pulse
        if (pulse_count > 0 && pulse_count <= MAX_PULSES) {
            low_pulses[pulse_count - 1] = current_time - falling_edge_time;  // Store low pulse width for the previous cycle
        }
        rising_edge_time = current_time;  // Update rising edge time
    }

    if (events & GPIO_IRQ_EDGE_FALL) {
        // Falling edge detected - end of high pulse, start of low pulse
        if (pulse_count < MAX_PULSES) {
            high_pulses[pulse_count] = current_time - rising_edge_time;  // Store high pulse width
            falling_edge_time = current_time;  // Update falling edge time
            pulse_count++;  // Increment pulse count after each high-low pair is captured
        }
    }
}

int main() {
    stdio_init_all();

    const uint gpio_input = 0;

    // Initialize GPIO 0 as input with pull-down resistor for pulse capturing
    gpio_init(gpio_input);
    gpio_set_dir(gpio_input, GPIO_IN);
    gpio_pull_down(gpio_input);

    // Set up interrupts for both rising and falling edges on GPIO 0
    gpio_set_irq_enabled_with_callback(gpio_input, GPIO_IRQ_EDGE_RISE | GPIO_IRQ_EDGE_FALL, true, &gpio_callback);

    while (true) {
        // Check if we've reached the max pulse count to start printing
        if (pulse_count >= MAX_PULSES) {
            printf("Captured %d pulses:\n", pulse_count);
            for (int i = 0; i < pulse_count; i++) {
                printf("Pulse %d - High: %u us, Low: %u us\n", i + 1, high_pulses[i], low_pulses[i]);
            }
            
            // Reset pulse count for new capture session
            pulse_count = 0;
            sleep_ms(1000); // Delay to prevent continuous printing
        }

        // Optional delay to prevent the loop from running too fast
        sleep_ms(100);
    }

    return 0;
}
